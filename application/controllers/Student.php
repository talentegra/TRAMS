<?php

/*
 * Generated by CRUDigniter v2.1 Beta 
 * www.crudigniter.com
 */

class Student extends APP_Controller {

    function __construct() {
        parent::__construct();
        if (!$this->ion_auth->logged_in()) {
            // redirect them to the login page
            redirect('auth/login', 'refresh');
        } else {
            if (!check_access($this->session->userdata('user_id'), 'student')) {
                redirect(get_default_page($this->session->userdata('user_id')), 'refresh');
            }
        }
        $this->load->model('Student_model');
    }

    /*
     * Listing of students
     */

    function index() {
        $data['students'] = $this->Student_model->get_all_students_details();
        $this->_tpl('student/list', $data);
    }

    /*
     * Adding a new student
     */

    function add() {
        $data['branches'] = $this->Branch_model->get_all_branch();
        $this->load->library('form_validation');

        $this->form_validation->set_rules('branch_id', 'Branch Id', 'required|integer');
        $this->form_validation->set_rules('student_name', 'Student Name', 'max_length[200]|required');
        $this->form_validation->set_rules('middle_name', 'Middle Name', 'required|max_length[128]');
        $this->form_validation->set_rules('last_name', 'Last Name', 'required|max_length[128]');
        $this->form_validation->set_rules('email', 'Email', 'max_length[80]|valid_email|required');
        $this->form_validation->set_rules('mobile', 'Mobile', 'max_length[20]');
        $this->form_validation->set_rules('photo', 'Photo', 'max_length[40]');

        if ($this->form_validation->run()) {
            
            list($day,$month,$year) = $this->input->post('reg_date');
            
            $params = array(
                'branch_id' => $this->input->post('branch_id'),
                'student_name' => $this->input->post('student_name'),
                'middle_name' => $this->input->post('middle_name'),
                'last_name' => $this->input->post('last_name'),
                'email' => $this->input->post('email'),
                'mobile' => $this->input->post('mobile'),
                'reg_date' => $year."-".$month."-".$day,
                'photo' => $this->input->post('photo'),
                'notes' => $this->input->post('notes'),
            );

            $student_id = $this->Student_model->add_student($params);
            redirect('student/index');
        } else {
            $this->_tpl('student/add', $data);
        }
    }

    /*
     * Editing a student
     */

    function edit($student_id) {
        // check if the student exists before trying to edit it
        $student = $this->Student_model->get_student($student_id);
        $data['branches'] = $this->Branch_model->get_all_branch();

        if (isset($student['student_id'])) {
            $this->load->library('form_validation');

            $this->form_validation->set_rules('branch_id', 'Branch Id', 'required|integer');
            $this->form_validation->set_rules('student_name', 'Student Name', 'max_length[200]|required');
            $this->form_validation->set_rules('middle_name', 'Middle Name', 'required|max_length[128]');
            $this->form_validation->set_rules('last_name', 'Last Name', 'required|max_length[128]');
            $this->form_validation->set_rules('email', 'Email', 'max_length[80]|valid_email|required');
            $this->form_validation->set_rules('mobile', 'Mobile', 'max_length[20]');
            $this->form_validation->set_rules('photo', 'Photo', 'max_length[40]');

            if ($this->form_validation->run()) {
                list($day,$month,$year) = $this->input->post('reg_date');
                
                $params = array(
                    'branch_id' => $this->input->post('branch_id'),
                    'student_name' => $this->input->post('student_name'),
                    'middle_name' => $this->input->post('middle_name'),
                    'last_name' => $this->input->post('last_name'),
                    'email' => $this->input->post('email'),
                    'mobile' => $this->input->post('mobile'),
                    'reg_date' => $year."-".$month."-".$day,
                    'photo' => $this->input->post('photo'),
                    'notes' => $this->input->post('notes'),
                );

                $this->Student_model->update_student($student_id, $params);
                redirect('student/index');
            } else {
                $data['student'] = $this->Student_model->get_student($student_id);

                $this->_tpl('student/edit', $data);
            }
        }
        else
            show_error('The student you are trying to edit does not exist.');
    }

    /*
     * Deleting student
     */

    function remove($student_id) {
        $student = $this->Student_model->get_student($student_id);

        // check if the student exists before trying to delete it
        if (isset($student['student_id'])) {
            $this->Student_model->delete_student($student_id);
            redirect('student/index');
        }
        else
            show_error('The student you are trying to delete does not exist.');
    }

}
