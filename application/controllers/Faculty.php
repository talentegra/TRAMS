<?php

/*
 * Generated by CRUDigniter v2.1 Beta 
 * www.crudigniter.com
 */

class Faculty extends APP_Controller {

    function __construct() {
        parent::__construct();
        if (!$this->ion_auth->logged_in()) {
            // redirect them to the login page
            redirect('auth/login', 'refresh');
        } else {
            if (!check_access($this->session->userdata('user_id'), 'faculty')) {
                redirect(get_default_page($this->session->userdata('user_id')), 'refresh');
            }
        }
        $this->load->model('Faculty_model');
    }

    /*
     * Listing of faculty
     */

    function index() {
        $data['faculty'] = $this->Faculty_model->get_all_faculty();

        $this->_tpl('faculty/list', $data);
    }

    /*
     * Adding a new faculty
     */

    function add() {
        $data['branches'] = $this->Branch_model->get_all_branch();

        $this->load->library('form_validation');

        $this->form_validation->set_rules('faculty_name', 'Faculty Name', 'max_length[200]|required');
        $this->form_validation->set_rules('last_name', 'Last Name', 'required|max_length[64]');
        $this->form_validation->set_rules('father_name', 'Father Name', 'max_length[64]');
        $this->form_validation->set_rules('husband_name', 'Husband Name', 'max_length[64]');
        $this->form_validation->set_rules('branch_id', 'Branch Id', 'required|integer');
        $this->form_validation->set_rules('dob', 'Dob', 'required');
        $this->form_validation->set_rules('dob_place', 'Dob Place', 'max_length[64]');
        $this->form_validation->set_rules('martial_status', 'Martial Status', 'max_length[64]|required');
        $this->form_validation->set_rules('email', 'Email', 'max_length[80]|valid_email|required');
        $this->form_validation->set_rules('mobile', 'Mobile', 'max_length[20]|required');
        $this->form_validation->set_rules('home_phone', 'Home Phone', 'integer');
        $this->form_validation->set_rules('photo', 'Photo', 'max_length[40]');
        $this->form_validation->set_rules('joined_date', 'Joined Date', 'required');
        $this->form_validation->set_rules('education', 'Education', 'required');
        $this->form_validation->set_rules('specialization', 'Specialization', 'required');
        $this->form_validation->set_rules('events_attended', 'Events Attended', 'integer');
        $this->form_validation->set_rules('event_trained', 'Event Trained', 'integer');
        $this->form_validation->set_rules('fulltime', 'Fulltime', 'required');

        if ($this->form_validation->run()) {
            $params = array(
                'faculty_name' => $this->input->post('faculty_name'),
                'last_name' => $this->input->post('last_name'),
                'father_name' => $this->input->post('father_name'),
                'husband_name' => $this->input->post('husband_name'),
                'branch_id' => $this->input->post('branch_id'),
                'dob' => $this->input->post('dob'),
                'dob_place' => $this->input->post('dob_place'),
                'martial_status' => $this->input->post('martial_status'),
                'children' => $this->input->post('children'),
                'email' => $this->input->post('email'),
                'mobile' => $this->input->post('mobile'),
                'home_phone' => $this->input->post('home_phone'),
                'photo' => $this->input->post('photo'),
                'joined_date' => $this->input->post('joined_date'),
                'education' => $this->input->post('education'),
                'specialization' => $this->input->post('specialization'),
                'achivement_awards' => $this->input->post('achivement_awards'),
                'events_attended' => $this->input->post('events_attended'),
                'event_trained' => $this->input->post('event_trained'),
                'fulltime' => $this->input->post('fulltime'),
                'notes' => $this->input->post('notes'),
                'active' => '1',
            );

            $faculty_id = $this->Faculty_model->add_faculty($params);
            redirect('faculty/index');
        } else {
            $this->_tpl('faculty/add', $data);
        }
    }

    /*
     * Editing a faculty
     */

    function edit($id) {
        // check if the faculty exists before trying to edit it
        $faculty = $this->Faculty_model->get_faculty($id);
        $data['branches'] = $this->Branch_model->get_all_branch();

        if (isset($faculty['id'])) {
            $this->load->library('form_validation');

            $this->form_validation->set_rules('faculty_name', 'Faculty Name', 'max_length[200]|required');
            $this->form_validation->set_rules('last_name', 'Last Name', 'required|max_length[64]');
            $this->form_validation->set_rules('father_name', 'Father Name', 'max_length[64]');
            $this->form_validation->set_rules('husband_name', 'Husband Name', 'max_length[64]');
            $this->form_validation->set_rules('branch_id', 'Branch Id', 'required|integer');
            $this->form_validation->set_rules('dob', 'Dob', 'required');
            $this->form_validation->set_rules('dob_place', 'Dob Place', 'max_length[64]');
            $this->form_validation->set_rules('martial_status', 'Martial Status', 'max_length[64]|required');
            $this->form_validation->set_rules('email', 'Email', 'max_length[80]|valid_email|required');
            $this->form_validation->set_rules('mobile', 'Mobile', 'max_length[20]|required');
            $this->form_validation->set_rules('home_phone', 'Home Phone', 'integer');
            $this->form_validation->set_rules('photo', 'Photo', 'max_length[40]');
            $this->form_validation->set_rules('joined_date', 'Joined Date', 'required');
            $this->form_validation->set_rules('education', 'Education', 'required');
            $this->form_validation->set_rules('specialization', 'Specialization', 'required');
            $this->form_validation->set_rules('events_attended', 'Events Attended', 'integer');
            $this->form_validation->set_rules('event_trained', 'Event Trained', 'integer');
            $this->form_validation->set_rules('fulltime', 'Fulltime', 'required');

            if ($this->form_validation->run()) {
                list($day,$month,$year) = explode("/", $this->input->post('dob'));
                list($day1,$month1,$year1) = explode("/",$this->input->post('joined_date'));
                
                $params = array(
                    'faculty_name' => $this->input->post('faculty_name'),
                    'last_name' => $this->input->post('last_name'),
                    'father_name' => $this->input->post('father_name'),
                    'husband_name' => $this->input->post('husband_name'),
                    'branch_id' => $this->input->post('branch_id'),
                    'dob' => $year."-".$month."-".$day,
                    'dob_place' => $this->input->post('dob_place'),
                    'martial_status' => $this->input->post('martial_status'),
                    'children' => $this->input->post('children'),
                    'email' => $this->input->post('email'),
                    'mobile' => $this->input->post('mobile'),
                    'home_phone' => $this->input->post('home_phone'),
                    'photo' => $this->input->post('photo'),
                    'joined_date' => $year1."-".$month1."-".$day1,
                    'education' => $this->input->post('education'),
                    'specialization' => $this->input->post('specialization'),
                    'achivement_awards' => $this->input->post('achivement_awards'),
                    'events_attended' => $this->input->post('events_attended'),
                    'event_trained' => $this->input->post('event_trained'),
                    'fulltime' => $this->input->post('fulltime'),
                    'notes' => $this->input->post('notes'),
                );
                
                /*echo "<pre>";
                print_r($_POST);
                print_r($params);
                echo "</pre>";
                exit;*/

                $this->Faculty_model->update_faculty($id, $params);
                redirect('faculty/index');
            } else {
                $data['faculty'] = $this->Faculty_model->get_faculty($id);

                $this->_tpl('faculty/edit', $data);
            }
        }
        else
            show_error('The faculty you are trying to edit does not exist.');
    }

    /*
     * Deleting faculty
     */

    function remove($id) {
        $faculty = $this->Faculty_model->get_faculty($id);

        // check if the faculty exists before trying to delete it
        if (isset($faculty['id'])) {
            $this->Faculty_admin_model->delete_faculty_admin_by_faculty_id($id);
            $this->Faculty_model->delete_faculty($id);
            redirect('faculty/index');
        }
        else
            show_error('The faculty you are trying to delete does not exist.');
    }

}
